#include <array>
#include <math.h>

#include "picosystem.hpp"

using namespace picosystem;

extern const color_t house[3060]; // see below for data
buffer_t house_image(68, 45, (color_t *)house);

// helpful vertex/vector type with operators and a few key functions
struct v2_t {
  float x, y;

  v2_t() : x(0), y(0) {}
  v2_t(float x, float y) : x(x), y(y) {}

  float length() { return sqrtf(x * x + y * y); }
  void normalise() { float l = length(); x /= l; y /= l; }
  void rotate(float a) {
    float r = deg2rad(a), s = sin(r), c = cos(r);
    float t = c * x - s * y;
    y = s * x + c * y;
    x = t;
  }

  // operators
  v2_t& operator+=(const v2_t& rhs) { x += rhs.x; y += rhs.y; return *this; }
  v2_t& operator-=(const v2_t& rhs) { x -= rhs.x; y -= rhs.y; return *this; }
  v2_t& operator*=(const v2_t& rhs) { x *= rhs.x; y *= rhs.y; return *this; }
  v2_t& operator/=(const v2_t& rhs) { x /= rhs.x; y /= rhs.y; return *this; }

  friend v2_t operator+(v2_t lhs, const v2_t& rhs) { lhs += rhs; return lhs; }
  friend v2_t operator-(v2_t lhs, const v2_t& rhs) { lhs -= rhs; return lhs; }
  friend v2_t operator*(v2_t lhs, const v2_t& rhs) { lhs *= rhs; return lhs; }
  friend v2_t operator/(v2_t lhs, const v2_t& rhs) { lhs /= rhs; return lhs; }

  v2_t& operator+=(const float& rhs) { x += rhs; y += rhs; return *this; }
  v2_t& operator-=(const float& rhs) { x -= rhs; y -= rhs; return *this; }
  v2_t& operator*=(const float& rhs) { x *= rhs; y *= rhs; return *this; }
  v2_t& operator/=(const float& rhs) { x /= rhs; y /= rhs; return *this; }

  friend v2_t operator+(v2_t lhs, const float& rhs) { lhs += rhs; return lhs; }
  friend v2_t operator-(v2_t lhs, const float& rhs) { lhs -= rhs; return lhs; }
  friend v2_t operator*(v2_t lhs, const float& rhs) { lhs *= rhs; return lhs; }
  friend v2_t operator/(v2_t lhs, const float& rhs) { lhs /= rhs; return lhs; }
};

// contain all of the details about a single particle
struct particle_t {
  template <class T>
  friend struct emitter_t;

  // properties
  v2_t pos;                     // position vertex
  v2_t dir;                     // direction vector
  float age;                    // value from 0..1 representing stage of life

  // internal use
  protected:
  int32_t life_ms;              // counts down to zero
  particle_t *next = nullptr;   // next particle in list

  public:
  void destroy() {life_ms = 0;}
  void create() {}
  void update(float elapsed) {}
  void draw() {}
};

template <class T>
struct emitter_t;

// emitters create, update, and destroy particles as needed
template <class T>
struct emitter_t {
  // emitter properties
  uint32_t max_count;           // max particle count
  int32_t max_life_ms;          // max lifetime for particles
  int32_t last_ms;
  //uint32_t unused_count = 0;    // number of unused particles

  // it's slightly more complicated but we create a pool of particles to use
  // over and over as it avoids memory fragmentation caused by allocating
  // particles dynamically as needed and is faster than using a container
  // like std::vector where we would need to erase elements in the middle
  T *unused = nullptr; // pool of unused particles
  T *active = nullptr; // poll of active particle

  // constructor
  emitter_t(
    uint32_t max_count, uint32_t max_life_ms)
    : max_count(max_count), max_life_ms(max_life_ms) {
    // initialise unused particle pool
    unused = new T[max_count];
    for(uint32_t i = 0; i < max_count - 1; i++) {
      unused[i].next = &unused[i + 1];
    }
    // take first timing for elapsed calculations
    last_ms = time();
  }

  // return the number of particles in the unused pool
  uint32_t unused_count() {
    uint32_t c = 0;
    T *p = unused;
    // walk the list of unused particles while counting
    while(p) { p = p->next; c++; }
    return c;
  }

  // reset emitter state
  void reset() {
    // return all particles back to the unused pool
    while(active) {
      T *pn = (T *)active->next;
      active->next = unused;
      unused = active;
      active = pn;
    }
    // reset first timing
    last_ms = time();
  }

  // create a new particle
  void create() {
    // pop first unused particle
    T *p = unused;
    unused = p ? (T *)p->next : nullptr;

    if(p) { // if we got one...
      // replace as head of active list
      p->next = active;
      active = p;
      // set initial age
      active->life_ms = max_life_ms;
      active->age = 0.0f;
      // call user create function to set initial state
      p->create();
    }
  }

  void destroy(T *p) {
    if(p == active) {
      // special case if head of list
      active = (T *)p->next;
    }else{
      // find the previous sibling in the list and remove particle
      T *test = active;
      while(test) {
        if(test->next == p) {
          // splice it out
          test->next = p->next;
        }
        test = (T *)test->next;
      }
    }

    // replace as head of unused list
    p->next = unused;
    unused = p;
  }

  void update() {
    int32_t current_ms = time();
    int32_t elapsed_ms = current_ms - last_ms;

    T *p = active;
    while(p) {
      // next pointer invalid if we destory so save it first
      T *n = (T *)p->next;

      p->life_ms -= elapsed_ms;

      if(p->life_ms <= 0) {
        // destroy if life ran out
        destroy(p);

        // create a new particle to replace the destroyed one
        create();
      }else{
        // update age
        p->age = float(max_life_ms - p->life_ms) / float(max_life_ms);

        // call update function
        float elapsed = elapsed_ms / 1000.0f;
        p->update(elapsed);
      }

      p = n;
      last_ms = current_ms;
    }

    // calculate the rate of creation of new particles based on max life,
    // this ensures that we build up to the max_count gradually instead of
    // blasting them all out at once
    if(unused) {
      static float c = 0.0f;
      c += (max_count * elapsed_ms / float(max_life_ms));
      while(c > 1.0f) {
        create();
        c--;
      }
    }
  }

  void draw() {
    T *p = active;
    while(p) {
      p->draw();
      p = (T *)p->next;
    }
  }
};

struct smoke_particle_t : public particle_t {
  static v2_t repeller;
  v2_t drift;

  void create() {
    // select a starting position and randomise drift (spread/lift)
    pos = {rndf(50, 70), 120};
    drift = {rndf(-6.0f, 6.0f), rndf(-15.0f, -10.0f)};
  }

  void update(float elapsed) {
    // apply drift to particles, ensures smoke spreads and rises over time
    pos += drift * elapsed;

    // calculate distance to repeller
    v2_t wv = pos - repeller;
    float d = (repeller - pos).length();

    // calculate strength of force of repeller based on distance
    float s = 50.0f - d < 0.0f ? 0.0f : (50.0f - d) / 50.0f;

    // update position based on repeller vector and force
    wv.normalise();
    pos += wv * s;
  }

  void draw() {
    // draw the particle
    fcircle(pos.x, pos.y, 4.0f);
  }

  static void update_repeller() {
    // move repeller to new location
    repeller.x = (sin(time() / 800.0f) * 50.0f) + 60.0f;
    repeller.y = (cos(time() / 1500.0f) * 50.0f) + 60.0f;
  }
};
v2_t smoke_particle_t::repeller;

struct spark_particle_t : public particle_t {
  v2_t dir;

  void create() {
    // select a starting position and randomise drift (spread/lift)
    pos = {rndf(58, 62), rndf(38, 42)};
    dir = {rndf(-30.0f, +30.0f), rndf(-40.0f, +40.0f)};
  }

  void update(float elapsed) {
    static v2_t gravity = {0, 40.0f};

    // apply gravity to the direction vector
    dir += gravity * elapsed;

    // apply drift to particles, ensures smoke spreads and rises over time
    pos += dir * elapsed;

    if(pos.y > 110) {
      pos.y = 110;
      dir.y *= rndf(0.1, 0.4);
      dir.y *= -1.0f;
    }
  }

  void draw() {
    static color_t palette[10] = {
      rgb(15, 15, 15),
      rgb(15, 14, 13),
      rgb(15, 13, 11),
      rgb(15, 12,  9),
      rgb(15, 11,  7),
      rgb(13, 10,  5),
      rgb(11,  9,  3),
      rgb( 9,  8,  1),
      rgb( 7,  7,  0),
      rgb( 5,  6,  0)
    };

    // draw the particle
    int32_t glow = (1.0f - age) * 2.0f;
    pen(15, 15, 15, glow);
    fcircle(pos.x, pos.y, glow * 2.0f);

    int32_t color_idx = age * 10.0f;
    pen(palette[color_idx]);
    pixel(pos.x, pos.y);
  }
};

struct rain_particle_t : public particle_t {
  static v2_t obstacle;
  v2_t dir;
  static v2_t wind;

  void create() {
    // select a starting position and randomise drift (spread/lift)
    pos = {rndf(-50, 170), rndf(-20, 0)};
    dir = {rndf(-0.5f, 0.5f), rndf(1.0f, 2.0f)};
  }

  void update(float elapsed) {
    static v2_t gravity = {0, 40.0f};

    // apply gravity to the direction vector
    dir += gravity * elapsed;

    // apply drift to particles, ensures smoke spreads and rises over time
    pos += dir * elapsed;

    pos.x += wind.x * elapsed;

    // check if collided with house

    // calculate coordinates of this raindrop within the house graphic
    int32_t cx = pos.x - 25;
    int32_t cy = pos.y - 60;

    if(cx >= 0 && cx < 68 && cy >= 0 && cy < 45) {
      // potential collision

      if(*house_image.p(cx, cy) != 0x00f0) {
        // if pixel not black then bounce!
        //pos.y = 110;
        pos -= dir * elapsed;
        dir.y *= rndf(0.0f, 0.1f);
        dir.y *= -1.0f;
      }
    }
/*
    v2_t ov = pos - obstacle;
    if(ov.length() < 20) {
      ov.normalise();
      pos = obstacle +  (ov * 20);
      dir = ov * (dir.length() / 2.0f);
    }*/

    if(pos.y > 96) {
      pos.y = 96;
      dir.y *= rndf(0.0f, 0.1f);
      dir.y *= -1.0f;
    }
  }

  void draw() {
    // draw the particle
    pen(12, 12, 15, 4);
    //pixel(pos.x, pos.y);
    v2_t e = dir;
    e.normalise();
    e *= 3;
    line(pos.x, pos.y, pos.x + e.x, pos.y + e.y);
  }

  static void update_obstacle() {
    // move repeller to new location
    obstacle.x = (sin(time() / 800.0f) * 50.0f) + 60.0f;
    obstacle.y = 80;

    wind.rotate(rndf(-1.0f, 2.5f));
  }
};
v2_t rain_particle_t::obstacle;
v2_t rain_particle_t::wind = {25.0f, 0.0f};

emitter_t<smoke_particle_t> smoke(500, 10000);
emitter_t<spark_particle_t> sparks(200, 3000);
emitter_t<rain_particle_t> rain(1000, 3000);



void init() {
}

int32_t view = 0;
int32_t view_count = 3;

void update(uint32_t tick) {
  if(pressed(LEFT)) {
    smoke.reset();
    sparks.reset();
    rain.reset();
    view--;
    if(view < 0) view = view_count - 1;
  }

  if(pressed(RIGHT)) {
    smoke.reset();
    sparks.reset();
    rain.reset();
    view++;
    if(view == view_count) view = 0;
  }

  switch(view) {
    case 0: {
      rain_particle_t::update_obstacle();
      rain.update();
    }break;

    case 1: {
      smoke_particle_t::update_repeller();
      smoke.update();
    }break;

    case 2: {
      sparks.update();
    }break;
  }
}

inline uint32_t rotl(uint32_t value, unsigned int count) {
    return value << count | value >> (32 - count);
}

void LIGHTNING(color_t *ps, int32_t so, int32_t ss, color_t *pd, uint32_t c) {
  while(c--) {
    *pd++ = ~*pd;
  }
}

// custom blend function that steps up r, g, b in order to create more
// intermediate grey tones for the smoke effect
void SMOKE(color_t *ps, int32_t so, int32_t ss, color_t *pd, uint32_t c) {
  while(c--) {
    uint32_t dr = (*pd & 0x000f) >>  0;
    uint32_t dg = (*pd & 0xf000) >> 12;
    uint32_t db = (*pd & 0x0f00) >>  8;

    // select which channel to increment
    uint32_t add = 0;
    if(dr <= dg && dr <= db && dr < 8) {
      add = (1 <<  0);
    }else if(db <= dg && db < 8) {
      add = (1 << 8);
    }else if(dg < 8) {
      add = (1 << 12);
    }

    (*pd++) += add;
  }
}


void draw(uint32_t tick) {

/*
  blend(COPY);
  pen(0, 0, 0);
  frect(0, 0, 120, 40);
  pen(8, 8, 8);
  frect(0, 40, 120, 40);
  pen(15, 15, 15);
  frect(0, 80, 120, 40);


  blend(ALPHA);

  for(int i = 0; i < 16; i++) {
    for(int j = 0; j < i; j++) {
      pen(15, 15, 15, 1);
      frect(i * 5 + 2, 2, 5, 5);

      pen(7, 7, 7, 1);
      frect(i * 5 + 2, 12, 5, 5);

      pen(8, 8, 8, 1);
      frect(i * 5 + 2, 22, 5, 5);

      pen(0, 0, 0, 1);
      frect(i * 5 + 2, 32, 5, 5);

    }
  }

  for(int i = 0; i < 16; i++) {
    for(int j = 0; j < i; j++) {
      pen(15, 15, 15, 1);
      frect(i * 5 + 2, 42, 5, 5);

      pen(7, 7, 7, 1);
      frect(i * 5 + 2, 52, 5, 5);

      pen(8, 8, 8, 1);
      frect(i * 5 + 2, 62, 5, 5);

      pen(0, 0, 0, 1);
      frect(i * 5 + 2, 72, 5, 5);
    }
  }

  for(int i = 0; i < 16; i++) {
    for(int j = 0; j < i; j++) {
      pen(15, 15, 15, 1);
      frect(i * 5 + 2, 82, 5, 5);

      pen(7, 7, 7, 1);
      frect(i * 5 + 2, 92, 5, 5);

      pen(8, 8, 8, 1);
      frect(i * 5 + 2, 102, 5, 5);

      pen(0, 0, 0, 1);
      frect(i * 5 + 2, 112, 5, 5);
    }
  }


  return
*/



  blend(ALPHA);
  pen(0, 0, 0, 2);
  clear();

  blend(ALPHA);

  std::string title;
  switch(view) {
    case 0: {
      title = "RAIN";

      blend(LIGHTEN);
      pen(1, 5, 6);
      frect(0, 96, 120, 24);
      blit(&house_image, 0, 0, 68, 45, 25, 60);

      blend(ALPHA);
      rain.draw();

      if(rnd(0, 100) == 0) {
        blend(LIGHTNING);
        frect(0, 0, 120, 120);
        blend();
      }

      // draw wind arrow
      pen(15, 15, 15, 8);
      camera(-15, -25);
      v2_t wv = rain_particle_t::wind;
      wv.normalise();
      wv *= 12.0f;
      line(0, 0, wv.x, wv.y);
      v2_t ah = wv / 2;
      ah.rotate(160);
      line(wv.x, wv.y, wv.x + ah.x, wv.y + ah.y);
      ah.rotate(40);
      line(wv.x, wv.y, wv.x + ah.x, wv.y + ah.y);
      camera();
    }break;

    case 1: {
      title = "SMOKE WITH REPELLER";

      //blend(SMOKE);
      pen(8, 8, 8, 1);
      smoke.draw();

      blend(ALPHA);

      // draw repeller
      pen(15, 15, 15);
      fcircle(smoke_particle_t::repeller.x, smoke_particle_t::repeller.y, 3);
    }break;

    case 2: {
      title = "SPARKS";
      sparks.draw();
    }break;
  }

  // draw title
  pen(15, 15, 15, 12);
  frect(0, 0, 240, 9);
  pen(5, 7, 9);
  text(title, 2, 2);

  // draw minimal statistics
  pen(4, 4, 4, 8);
  frect(0, 111, 120, 9);
  pen(15, 15, 15);
  std::string debug = "UP: " + str(stats.update_us / 1000) + "ms";
  debug += "      ";
  debug += "DRAW: " + str(stats.draw_us / 1000) + "ms";
  debug += "      ";
  debug += "FPS: " + str(stats.fps);
  text(debug, 2, 113);
}


const color_t house[3060] = {
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x21f5, 0x21f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x53f5, 0x53f5, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x53f5, 0x53f5, 0x76f8, 0x76f8, 0x97fa, 0x97fa, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x53f5, 0x53f5, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x21f5, 0x21f5, 0x42f4, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x53f5, 0x53f5, 0x97fa, 0x97fa, 0x76f8, 0x76f8, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x21f5,
  0x42f4, 0x42f4, 0x53f5, 0x42f4, 0x21f5, 0x42f4, 0x42f4, 0x42f4,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x42f4, 0x42f4, 0x42f4,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x42f4, 0x42f4, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x42f4, 0x42f4, 0x53f5, 0x53f5, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x21f5, 0x42f4, 0x42f4, 0x53f5, 0x53f5, 0x53f5,
  0x42f4, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x53f5, 0x76f8, 0x76f8, 0x97fa, 0x97fa, 0x21f5,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x21f5, 0x42f4, 0x42f4,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x42f4, 0x42f4, 0x42f4,
  0x42f4, 0x21f5, 0x21f5, 0x21f5, 0x42f4, 0x42f4, 0x42f4, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x42f4, 0x42f4, 0x42f4, 0x21f5, 0x21f5,
  0x42f4, 0x42f4, 0x42f4, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x21f5, 0x21f5, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x21f5, 0x42f4, 0x42f4, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x42f4, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x21f5, 0x42f4, 0x42f4, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x75f8, 0x75f8, 0x53f5, 0x53f5, 0x53f5, 0x42f4,
  0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x21f5, 0x21f5,
  0x21f5, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x21f5, 0x21f5,
  0x21f5, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x21f5, 0x21f5,
  0x21f5, 0x42f4, 0x42f4, 0x21f5, 0x21f5, 0x42f4, 0x42f4, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x21f5, 0x42f4,
  0x42f4, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x42f4, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x21f5, 0x42f4, 0x42f4, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x75f8, 0x75f8, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4,
  0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4,
  0x42f4, 0x42f4, 0x21f5, 0x21f5, 0x42f4, 0x42f4, 0x42f4, 0x21f5,
  0x42f4, 0x42f4, 0x21f5, 0x21f5, 0x42f4, 0x21f5, 0x42f4, 0x42f4,
  0x42f4, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x21f5, 0x42f4, 0x42f4, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x42f4, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x21f5,
  0x42f4, 0x42f4, 0x53f5, 0x75f8, 0x75f8, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x75f8, 0x75f8, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x75f8, 0x75f8, 0x53f5, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4,
  0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4,
  0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4, 0x42f4,
  0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5, 0x21f5,
  0x42f4, 0x42f4, 0x42f4, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x21f5, 0x42f4, 0x42f4, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x75f8, 0x75f8, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x75f8, 0x75f8, 0x53f5, 0x53f5, 0x75f8, 0x75f8, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x75f8, 0x75f8, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x53f5, 0x53f5, 0x76f8,
  0x32f2, 0x32f2, 0x32f2, 0x32f2, 0x32f2, 0x53f5, 0x53f5, 0x53f5,
  0x76f8, 0x62f7, 0x62f7, 0x62f7, 0x62f7, 0x53f5, 0x53f5, 0x53f5,
  0x76f8, 0x76f8, 0x62f7, 0x62f7, 0x62f7, 0x62f7, 0x62f7, 0x62f7,
  0x64f7, 0x76f8, 0x76f8, 0x62f7, 0x62f7, 0x62f7, 0x62f7, 0x62f7,
  0x62f7, 0x64f7, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x42f4, 0x42f4,
  0x42f4, 0x64f7, 0x76f8, 0x76f8, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x53f5, 0x53f5, 0x76f8, 0x53f3, 0x53f3, 0x53f3, 0x53f3,
  0x53f3, 0x53f5, 0x53f5, 0x53f5, 0x76f8, 0xe5ff, 0xe5ff, 0xe5ff,
  0xe5ff, 0x53f5, 0x53f5, 0x53f5, 0x76f8, 0x76f8, 0xe5ff, 0xe5ff,
  0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0x64f7, 0x76f8, 0x76f8, 0xe5ff,
  0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0x64f7, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x42f4, 0x42f4, 0x42f4, 0x64f7, 0x76f8, 0x76f8,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x53f5, 0x53f5, 0x76f8,
  0x53f3, 0x53f3, 0x53f3, 0x53f3, 0x53f3, 0x53f5, 0x53f5, 0x53f5,
  0x76f8, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0x53f5, 0x53f5, 0x53f5,
  0x76f8, 0x76f8, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff,
  0x64f7, 0x76f8, 0x76f8, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff,
  0xe5ff, 0x64f7, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x42f4, 0x42f4,
  0x42f4, 0x64f7, 0x76f8, 0x76f8, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x53f5, 0x53f5, 0x76f8, 0x53f3, 0x53f3, 0x53f3, 0x53f3,
  0x53f3, 0x53f5, 0x53f5, 0x53f5, 0x76f8, 0xe5ff, 0xe5ff, 0xe5ff,
  0xe5ff, 0x53f5, 0x53f5, 0x53f5, 0x76f8, 0x76f8, 0xe5ff, 0xe5ff,
  0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0x64f7, 0x76f8, 0x76f8, 0xe5ff,
  0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0x64f7, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x53f5, 0x53f5, 0x76f8,
  0x53f3, 0x53f3, 0x53f3, 0x53f3, 0x53f3, 0x53f5, 0x53f5, 0x53f5,
  0x76f8, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0x53f5, 0x53f5, 0x53f5,
  0x76f8, 0x76f8, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff,
  0x64f7, 0x76f8, 0x76f8, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff,
  0xe5ff, 0x64f7, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x53f5, 0x53f5, 0x76f8, 0x53f3, 0x53f3, 0x53f3, 0x53f3,
  0x53f3, 0x53f5, 0x53f5, 0x53f5, 0x76f8, 0xe5ff, 0xe5ff, 0xe5ff,
  0xe5ff, 0x53f5, 0x53f5, 0x53f5, 0x76f8, 0x76f8, 0xe5ff, 0xe5ff,
  0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0x64f7, 0x76f8, 0x76f8, 0xe5ff,
  0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0xe5ff, 0x64f7, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x53f5, 0x53f5, 0x76f8,
  0x53f3, 0x53f3, 0x53f3, 0xaafa, 0x53f3, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x53f5, 0x53f5, 0x76f8, 0x53f3, 0x53f3, 0x53f3, 0x53f3,
  0x53f3, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x75f8, 0x75f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x97fa, 0x97fa,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x53f5, 0x53f5, 0x76f8,
  0x53f3, 0x32f2, 0x32f2, 0x32f2, 0x53f3, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x53f5, 0x53f5, 0x76f8, 0x53f3, 0x53f3, 0x53f3, 0x53f3,
  0x53f3, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x75f8, 0x75f8, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x76f8, 0x76f8,
  0x97fa, 0x97fa, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x97fa, 0x97fa, 0x76f8, 0x76f8,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x53f5, 0x53f5, 0x76f8,
  0x53f3, 0x53f3, 0x53f3, 0x53f3, 0x53f3, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x53f5, 0x53f5, 0x76f8, 0x53f3, 0x53f3, 0x53f3, 0x53f3,
  0x53f3, 0x53f5, 0x75f8, 0x75f8, 0x53f5, 0x53f5, 0x75f8, 0x75f8,
  0x53f5, 0x53f5, 0x75f8, 0x75f8, 0x76f8, 0x76f8, 0x97fa, 0x97fa,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x97fa, 0x97fa, 0x76f8, 0x76f8, 0x97fa, 0x97fa,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x53f5, 0x53f5, 0x76f8,
  0x53f3, 0x53f3, 0x53f3, 0x53f3, 0x53f3, 0x53f5, 0x53f5, 0x53f5,
  0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5, 0x53f5,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x76f8,
  0x76f8, 0x76f8, 0x76f8, 0x76f8, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0, 0x00f0,
  0x00f0, 0x00f0, 0x00f0, 0x00f0,
};